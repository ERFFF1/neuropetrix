name: NeuroPETRIX CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'
  POSTGRES_DB: neuropetrix_test
  POSTGRES_USER: neuropetrix
  POSTGRES_PASSWORD: password

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

      minio:
        image: minio/minio:latest
        env:
          MINIO_ROOT_USER: neuropetrix
          MINIO_ROOT_PASSWORD: password123
        options: >-
          --health-cmd "curl -f http://localhost:9000/minio/health/live"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 9000:9000

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        pip install pytest pytest-asyncio httpx schemathesis pytest-cov
        pip install locust k6

    - name: Run unit tests
      env:
        DATABASE_URL: postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}
        REDIS_URL: redis://localhost:6379
        MINIO_ENDPOINT: localhost:9000
        MINIO_ACCESS_KEY: neuropetrix
        MINIO_SECRET_KEY: password123
      run: |
        cd backend
        pytest tests/ -v --cov=. --cov-report=xml --cov-report=html

    - name: API Schema Validation
      run: |
        cd backend
        schemathesis run main:app --base-url http://localhost:8000 --hypothesis-max-examples=20

    - name: Performance Tests
      run: |
        cd backend
        python -m pytest tests/test_performance.py -v

    - name: Load Testing with Locust
      run: |
        cd backend
        locust -f tests/locustfile.py --headless -u 10 -r 2 --run-time 30s --host http://localhost:8000

    - name: Security Scan
      run: |
        pip install bandit safety
        cd backend
        bandit -r . -f json -o bandit-report.json || true
        safety check --json --output safety-report.json || true

    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker images
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./docker-compose.yaml
        push: true
        tags: |
          neuropetrix/api:latest
          neuropetrix/api:${{ github.sha }}
          neuropetrix/worker:latest
          neuropetrix/worker:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'

    steps:
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add staging deployment commands here
        # Example: kubectl apply -f k8s/staging/

  deploy-production:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add production deployment commands here
        # Example: kubectl apply -f k8s/production/

  audit:
    needs: test
    runs-on: ubuntu-latest
    if: always()

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        pip install -r backend/requirements.txt

    - name: Generate audit report
      env:
        DATABASE_URL: postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}
      run: |
        cd backend
        python -m scripts.audit_reporter --output-format json --output-file audit-report.json

    - name: Upload audit report
      uses: actions/upload-artifact@v3
      with:
        name: audit-report
        path: backend/audit-report.json

  model-registry:
    needs: test
    runs-on: ubuntu-latest
    if: always()

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        pip install -r backend/requirements.txt

    - name: Update model registry
      run: |
        cd backend
        python -m scripts.update_model_registry --version ${{ github.sha }}

    - name: Upload model registry
      uses: actions/upload-artifact@v3
      with:
        name: model-registry
        path: backend/compliance/model_registry.json


