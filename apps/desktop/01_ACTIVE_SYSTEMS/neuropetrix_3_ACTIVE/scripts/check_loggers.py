#!/usr/bin/env python3
"""
Logger usage checker for NeuroPETRIX
Otomatik logger kullanƒ±mƒ± kontrol√º ve standartla≈ütƒ±rma
"""

import ast
import sys
import os
from pathlib import Path
from typing import List, Dict, Set, Tuple
import re

class LoggerChecker:
    def __init__(self):
        self.project_root = Path(__file__).parent.parent
        self.backend_path = self.project_root / "backend"
        self.errors = []
        self.warnings = []
        self.suggestions = []
        
        # Logger standartlarƒ±
        self.standard_logger_name = "logger"
        self.required_logger_imports = [
            "import logging",
            "from logging import getLogger",
            "from backend.core.logging_config import get_logger"
        ]
        
        # Logger seviyeleri
        self.log_levels = ["DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL"]
        
        # Logger kullanƒ±mƒ± olmasƒ± gereken dosyalar
        self.logger_required_files = [
            "routers/",
            "services/",
            "core/",
            "ai_scripts/"
        ]

    def check_file_loggers(self, file_path: Path) -> bool:
        """Tek bir dosyadaki logger kullanƒ±mƒ±nƒ± kontrol et"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # AST parse et
            try:
                tree = ast.parse(content)
            except SyntaxError as e:
                self.errors.append(f"‚ùå {file_path}: Syntax hatasƒ± - {e}")
                return False
            
            # Logger kullanƒ±mƒ±nƒ± kontrol et
            self._check_logger_imports(file_path, content)
            self._check_logger_usage(file_path, tree)
            self._check_logger_standards(file_path, content)
            
            return len(self.errors) == 0
            
        except Exception as e:
            self.errors.append(f"‚ùå {file_path}: Dosya okuma hatasƒ± - {e}")
            return False

    def _check_logger_imports(self, file_path: Path, content: str):
        """Logger import'larƒ±nƒ± kontrol et"""
        lines = content.split('\n')
        
        # Logger import'u var mƒ±?
        has_logger_import = False
        for line in lines:
            if any(import_stmt in line for import_stmt in self.required_logger_imports):
                has_logger_import = True
                break
        
        # Logger kullanƒ±mƒ± var mƒ±?
        has_logger_usage = any(level.lower() in content.lower() for level in self.log_levels)
        
        # Logger kullanƒ±mƒ± varsa import da olmalƒ±
        if has_logger_usage and not has_logger_import:
            self.errors.append(f"‚ùå {file_path}: Logger kullanƒ±mƒ± var ama import eksik")
            self.suggestions.append(f"üí° {file_path}: 'import logging' veya 'from logging import getLogger' ekleyin")
        
        # Logger import'u varsa kullanƒ±m da olmalƒ±
        if has_logger_import and not has_logger_usage:
            self.warnings.append(f"‚ö†Ô∏è  {file_path}: Logger import'u var ama kullanƒ±lmƒ±yor")

    def _check_logger_usage(self, file_path: Path, tree: ast.AST):
        """Logger kullanƒ±mƒ±nƒ± kontrol et"""
        for node in ast.walk(tree):
            # Function call'larƒ± kontrol et
            if isinstance(node, ast.Call):
                self._check_logger_call(file_path, node)
            
            # Variable assignment'larƒ± kontrol et
            elif isinstance(node, ast.Assign):
                self._check_logger_assignment(file_path, node)

    def _check_logger_call(self, file_path: Path, node: ast.Call):
        """Logger call'ƒ±nƒ± kontrol et"""
        # Attribute access kontrol√º (logger.info, logger.error, etc.)
        if isinstance(node.func, ast.Attribute):
            if hasattr(node.func.value, 'id'):
                var_name = node.func.value.id
                method_name = node.func.attr
                
                # Logger method'u mu?
                if method_name.lower() in [level.lower() for level in self.log_levels]:
                    # Standart logger ismi kullanƒ±lƒ±yor mu?
                    if var_name != self.standard_logger_name:
                        self.warnings.append(
                            f"‚ö†Ô∏è  {file_path}:{node.lineno} Standart olmayan logger ismi: {var_name}"
                        )
                        self.suggestions.append(
                            f"üí° {file_path}:{node.lineno} '{var_name}' yerine 'logger' kullanƒ±n"
                        )
                    
                    # Log mesajƒ± kontrol√º
                    if node.args:
                        self._check_log_message(file_path, node)

    def _check_logger_assignment(self, file_path: Path, node: ast.Assign):
        """Logger assignment'ƒ±nƒ± kontrol et"""
        for target in node.targets:
            if isinstance(target, ast.Name):
                var_name = target.id
                
                # Logger assignment'ƒ± mƒ±?
                if isinstance(node.value, ast.Call):
                    if isinstance(node.value.func, ast.Name):
                        func_name = node.value.func.id
                        if func_name in ['getLogger', 'logging.getLogger']:
                            # Standart logger ismi kullanƒ±lƒ±yor mu?
                            if var_name != self.standard_logger_name:
                                self.warnings.append(
                                    f"‚ö†Ô∏è  {file_path}:{node.lineno} Standart olmayan logger ismi: {var_name}"
                                )
                                self.suggestions.append(
                                    f"üí° {file_path}:{node.lineno} '{var_name}' yerine 'logger' kullanƒ±n"
                                )

    def _check_log_message(self, file_path: Path, node: ast.Call):
        """Log mesajƒ±nƒ± kontrol et"""
        if not node.args:
            self.warnings.append(f"‚ö†Ô∏è  {file_path}:{node.lineno} Bo≈ü log mesajƒ±")
            return
        
        # ƒ∞lk arg√ºman mesaj
        message_arg = node.args[0]
        
        # String literal kontrol√º
        if isinstance(message_arg, ast.Constant) and isinstance(message_arg.value, str):
            message = message_arg.value
            
            # Mesaj formatƒ± kontrol√º
            if not message.strip():
                self.warnings.append(f"‚ö†Ô∏è  {file_path}:{node.lineno} Bo≈ü log mesajƒ±")
            
            # T√ºrk√ße karakter kontrol√º
            if any(ord(char) > 127 for char in message):
                self.warnings.append(f"‚ö†Ô∏è  {file_path}:{node.lineno} T√ºrk√ße karakter i√ßeren log mesajƒ±")
        
        # F-string kullanƒ±mƒ± √∂ner
        elif isinstance(message_arg, ast.BinOp) and isinstance(message_arg.op, ast.Mod):
            self.suggestions.append(
                f"üí° {file_path}:{node.lineno} % formatting yerine f-string kullanmayƒ± d√º≈ü√ºn√ºn"
            )

    def _check_logger_standards(self, file_path: Path, content: str):
        """Logger standartlarƒ±nƒ± kontrol et"""
        lines = content.split('\n')
        
        # Print statement kontrol√º
        for i, line in enumerate(lines, 1):
            if 'print(' in line and not line.strip().startswith('#'):
                self.warnings.append(f"‚ö†Ô∏è  {file_path}:{i} print() kullanƒ±mƒ± - logger kullanmayƒ± d√º≈ü√ºn√ºn")
                self.suggestions.append(f"üí° {file_path}:{i} print() yerine logger.info() kullanƒ±n")
        
        # Exception handling kontrol√º
        if 'except' in content and 'logger.error' not in content:
            self.warnings.append(f"‚ö†Ô∏è  {file_path}: Exception handling var ama logger.error kullanƒ±lmƒ±yor")
            self.suggestions.append(f"üí° {file_path}: Exception'larda logger.error() kullanƒ±n")

    def check_all_backend_files(self) -> bool:
        """T√ºm backend dosyalarƒ±nƒ± kontrol et"""
        print("üîç Backend logger kullanƒ±mƒ± kontrol ediliyor...")
        
        if not self.backend_path.exists():
            self.errors.append(f"‚ùå Backend dizini bulunamadƒ±: {self.backend_path}")
            return False
        
        # T√ºm Python dosyalarƒ±nƒ± bul
        python_files = list(self.backend_path.rglob("*.py"))
        
        print(f"üìÅ {len(python_files)} Python dosyasƒ± bulundu")
        
        success_count = 0
        for py_file in python_files:
            if self.check_file_loggers(py_file):
                success_count += 1
        
        print(f"‚úÖ {success_count}/{len(python_files)} dosya ba≈üarƒ±yla kontrol edildi")
        
        return len(self.errors) == 0

    def generate_logger_template(self) -> str:
        """Standart logger template'i olu≈ütur"""
        template = '''
# Standart Logger Template
import logging
from typing import Optional

# Logger olu≈ütur
logger = logging.getLogger(__name__)

# Logger kullanƒ±m √∂rnekleri
def example_function():
    """√ñrnek fonksiyon"""
    try:
        logger.info("Fonksiyon ba≈ülatƒ±ldƒ±")
        
        # ƒ∞≈ülem yap
        result = some_operation()
        
        logger.info(f"ƒ∞≈ülem tamamlandƒ±: {result}")
        return result
        
    except Exception as e:
        logger.error(f"ƒ∞≈ülem hatasƒ±: {e}", exc_info=True)
        raise

# Logger seviyeleri
logger.debug("Debug mesajƒ±")
logger.info("Bilgi mesajƒ±")
logger.warning("Uyarƒ± mesajƒ±")
logger.error("Hata mesajƒ±")
logger.critical("Kritik hata mesajƒ±")
'''
        return template

    def generate_report(self) -> str:
        """Kontrol raporu olu≈ütur"""
        report = []
        report.append("=" * 60)
        report.append("üîç NEUROPETRIX LOGGER CHECKER RAPORU")
        report.append("=" * 60)
        
        if self.errors:
            report.append(f"\n‚ùå HATALAR ({len(self.errors)}):")
            for error in self.errors:
                report.append(f"  {error}")
        
        if self.warnings:
            report.append(f"\n‚ö†Ô∏è  UYARILAR ({len(self.warnings)}):")
            for warning in self.warnings:
                report.append(f"  {warning}")
        
        if self.suggestions:
            report.append(f"\nüí° √ñNERƒ∞LER ({len(self.suggestions)}):")
            for suggestion in self.suggestions:
                report.append(f"  {suggestion}")
        
        if not self.errors and not self.warnings:
            report.append("\n‚úÖ T√ºm logger kullanƒ±mlarƒ± standartlara uygun!")
        
        report.append(f"\nüìä √ñZET:")
        report.append(f"  - Hata: {len(self.errors)}")
        report.append(f"  - Uyarƒ±: {len(self.warnings)}")
        report.append(f"  - √ñneri: {len(self.suggestions)}")
        report.append(f"  - Durum: {'‚úÖ BA≈ûARILI' if len(self.errors) == 0 else '‚ùå BA≈ûARISIZ'}")
        
        # Logger template'i ekle
        if self.errors or self.warnings:
            report.append(f"\nüìù STANDART LOGGER TEMPLATE:")
            report.append(self.generate_logger_template())
        
        return "\n".join(report)

def main():
    """Ana fonksiyon"""
    checker = LoggerChecker()
    
    # Backend dosyalarƒ±nƒ± kontrol et
    backend_ok = checker.check_all_backend_files()
    
    # Rapor olu≈ütur
    report = checker.generate_report()
    print(report)
    
    # Exit code
    if backend_ok:
        sys.exit(0)
    else:
        sys.exit(1)

if __name__ == "__main__":
    main()
