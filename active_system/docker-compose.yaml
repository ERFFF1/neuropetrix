version: '3.8'

services:
  # API Service
  api:
    build: ./backend
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://neuropetrix:password@postgres:5432/neuropetrix
      - REDIS_URL=redis://redis:6379
      - MINIO_ENDPOINT=minio:9000
      - ORTHANC_URL=http://orthanc:8042
      - FHIR_URL=http://hapi-fhir:8080
      - SENTRY_DSN=${SENTRY_DSN}
      - PROMETHEUS_ENABLED=true
      - MODEL_REGISTRY_PATH=/app/models/registry
      - AUDIT_LOG_PATH=/app/logs/audit
      - MLFLOW_TRACKING_URI=http://mlflow:5000
    depends_on:
      - postgres
      - redis
      - minio
      - orthanc
      - hapi-fhir
      - mlflow
    volumes:
      - ./data:/app/data
      - ./models:/app/models
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Database
  postgres:
    image: postgres:15
    environment:
      - POSTGRES_DB=neuropetrix
      - POSTGRES_USER=neuropetrix
      - POSTGRES_PASSWORD=password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/migrations:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U neuropetrix"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for job queue
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO for file storage
  minio:
    image: minio/minio:latest
    environment:
      - MINIO_ROOT_USER=neuropetrix
      - MINIO_ROOT_PASSWORD=password123
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Orthanc PACS
  orthanc:
    image: jodogne/orthanc-plugins:1.12.1
    ports:
      - "8042:8042"
      - "4242:4242"
    environment:
      - ORTHANC__NAME=NeuroPETRIX-PACS
      - ORTHANC__AET=NEUROPETRIX
      - ORTHANC__VERBOSE=true
      - ORTHANC__ENABLE_CSRF=false
    volumes:
      - orthanc_data:/var/lib/orthanc/db
      - ./data/dicom:/var/lib/orthanc/db
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8042/system"]
      interval: 30s
      timeout: 10s
      retries: 3

  # HAPI FHIR Server
  hapi-fhir:
    image: hapiproject/hapi:latest
    ports:
      - "8080:8080"
    environment:
      - HAPI_FHIR__FHI_CLIENT__TEST_SERVER_URL=http://localhost:8080/fhir
      - HAPI_FHIR__LOGGING__LEVEL=INFO
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/fhir/metadata"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MLflow for model tracking
  mlflow:
    image: ghcr.io/mlflow/mlflow:latest
    ports:
      - "5000:5000"
    environment:
      - MLFLOW_TRACKING_URI=http://localhost:5000
      - MLFLOW_DEFAULT_ARTIFACT_ROOT=/mlflow/artifacts
    volumes:
      - mlflow_data:/mlflow
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker for async tasks
  worker:
    build: ./backend
    command: celery -A main.celery worker --loglevel=info --concurrency=2
    environment:
      - DATABASE_URL=postgresql://neuropetrix:password@postgres:5432/neuropetrix
      - REDIS_URL=redis://redis:6379
      - MINIO_ENDPOINT=minio:9000
      - ORTHANC_URL=http://orthanc:8042
    depends_on:
      - postgres
      - redis
      - minio
      - orthanc
    volumes:
      - ./data:/app/data
      - ./models:/app/models
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "celery", "-A", "main.celery", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Beat for scheduled tasks
  beat:
    build: ./backend
    command: celery -A main.celery beat --loglevel=info
    environment:
      - DATABASE_URL=postgresql://neuropetrix:password@postgres:5432/neuropetrix
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres
      - redis
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    restart: unless-stopped
    depends_on:
      - prometheus

  # Sentry for error tracking
  sentry:
    image: getsentry/sentry:latest
    ports:
      - "9000:9000"
    environment:
      - SENTRY_SECRET_KEY=${SENTRY_SECRET_KEY}
      - SENTRY_POSTGRES_HOST=postgres
      - SENTRY_POSTGRES_DB=sentry
      - SENTRY_POSTGRES_USER=sentry
      - SENTRY_POSTGRES_PASSWORD=sentry
      - SENTRY_REDIS_HOST=redis
    depends_on:
      - postgres
      - redis
    restart: unless-stopped

volumes:
  postgres_data:
  orthanc_data:
  minio_data:
  mlflow_data:
  prometheus_data:
  grafana_data:


